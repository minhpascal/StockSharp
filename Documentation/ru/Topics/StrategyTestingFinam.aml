<?xml version="1.0" encoding="utf-8"?>
<topic id="abfde7cc-fa0e-4705-b610-41b2ba1a2252" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
     <para>Для тестирования на истории в классе <codeEntityReference>T:StockSharp.Algo.Testing.HistoryEmulationConnector</codeEntityReference>, 
     наряду с использованием хранилища
     данных <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference>, 
     предусмотрен альтернативный механизм работы с источниками
     данных. Этот механизм позволяет "напрямую" загружать данные с серверов поставщиков исторической информации, 
     в частности с сервера Финам или же работать с собственными источниками
     данных.
     </para>
     <para>
     Рассмотрим работу этого механизма на примере получения данных с сервиса Финам. Для работы с Финам в <token>stocksharp</token>
     существует специальный класс <codeEntityReference>T:StockSharp.Algo.History.Russian.Finam.FinamHistorySource</codeEntityReference>, который
     позволяет получать свечи, тики и информацию об инструментах.
     <!--Func<DateTimeOffset, IEnumerable<Message>-->
     
     </para>
     
	<procedure>
		<title>Тестирование с данными, загруженными с Финама</title>
		<steps class="ordered">
			<step>
				<content>
				<para>
				 Сначала нужно получить информацию об инструментах с сервиса Финам. Для этого необходимо создать хранилище для инструментов
				 (<legacyBold>FinamSecurityStorage</legacyBold>) - класс, реализующий интерфейс
				 <codeEntityReference>T:StockSharp.Algo.Storages.ISecurityStorage</codeEntityReference>. 
				 Код такого класса есть в примере <legacyItalic>Samples/Testing/SampleHistoryTesting</legacyItalic>.
				</para>
				
				<list class="ordered">
  					<listItem>
  						<para>Создаем инструмент.</para>
  <code >
				<![CDATA[
var security = new Security
{
    Id = secid,
    Code = secCode,
    Board = board
};

 ]]>
				</code>
			    </listItem>
  					<listItem>
  					<para>Создаем экземпляры классов хранилища инструментов и загрузчика данных с Финама. Обратите внимание, что в данном примере
  					мы передаем в конструктор <legacyBold>FinamSecurityStorage</legacyBold> один инструмент. Если необходимо работать с несколькими инструментами, то Вы можете
  					модифицировать код конструктора и передать массив инструментов.</para>
  					<code>
				<![CDATA[
var finamSecurityStorage = new FinamSecurityStorage(security);
var finamHistorySource = new FinamHistorySource();
 ]]>
  					</code>
  					</listItem>
  					<listItem>
  					<para>
  					Далее необходимо обновить хранилище инструментов. Для этого используется метод
  					<codeEntityReference qualifyHint="true">M:StockSharp.Algo.History.Russian.Finam.FinamHistorySource.Refresh(StockSharp.Algo.Storages.ISecurityStorage,StockSharp.Algo.Storages.INativeIdStorage,StockSharp.BusinessEntities.Security,System.Action{StockSharp.BusinessEntities.Security},System.Func{System.Boolean})</codeEntityReference>
  					Фактически этот метод записывает в свойство <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Security.ExtensionInfo</codeEntityReference>
  					коды инструмента и площадки, используемые в Финам, которые будут использованы при загрузке данных по инструменту. 
  					Обратите внимание, что первый аргумент метода имеет
  					тип <codeEntityReference>T:StockSharp.Algo.Storages.ISecurityStorage</codeEntityReference> - этот интерфейс был реализован
  					в <legacyBold>FinamSecurityStorage</legacyBold>.
  					Также нужно иметь ввиду, что второй аргумент (<codeEntityReference>T:StockSharp.BusinessEntities.Security</codeEntityReference>) при обновлении инструментов хранилища выполняет функцию шаблона.
  					</para>
  					<code>
				<![CDATA[
finamHistorySource.Refresh(finamSecurityStorage, security, s => {}, () => false);
 ]]>
  					</code>
  					</listItem>
				</list>
				</content>
			</step>
			<step>
				<content>
				<para>
					Теперь нужно зарегистрировать в <codeEntityReference>T:StockSharp.Algo.Testing.HistoryEmulationConnector</codeEntityReference> новый источник данных. Это делается при помощи
					метода 
					<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Testing.HistoryEmulationConnector.RegisterHistorySource(StockSharp.BusinessEntities.Security,StockSharp.Messages.MarketDataTypes,System.Object,System.Func{System.DateTimeOffset,System.Collections.Generic.IEnumerable{StockSharp.Messages.Message}})</codeEntityReference>.
					Первый аргумент метода - это инструмент. Далее указывается тип данных источника. В нашем случае - это 
					обычные свечи <codeEntityReference>F:StockSharp.Messages.MarketDataTypes.CandleTimeFrame</codeEntityReference>. Третий аргумент - параметр, связанный с типом рыночных данных. Для обычных свечей - это таймфрейм свечи.  
				</para>			
				<para>
				В последнем аргументе нужно указать функцию, которая возвращает рыночные данные. Причем функция должна возвращать значение типа <legacyBold>IEnumerable&lt;Message&gt;</legacyBold> и принимать параметр типа
				<codeEntityReference>T:System.DateTimeOffset</codeEntityReference>. В нашем случае используется метод, который
				запрашивает свечи с Финама - 
				<codeEntityReference qualifyHint="true">M:StockSharp.Algo.History.Russian.Finam.FinamHistorySource.GetCandles(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.INativeIdStorage,System.TimeSpan,System.DateTime,System.DateTime)</codeEntityReference>
				</para>
				<para>
				Данные будут загружены после старта коннектора, причем в качестве начальной и конечной дат загрузки будут использованы значения свойств 
				<codeEntityReference>P:StockSharp.Algo.Testing.HistoryMessageAdapter.StartDate</codeEntityReference> и
				<codeEntityReference>P:StockSharp.Algo.Testing.HistoryMessageAdapter.StopDate</codeEntityReference> из <codeEntityReference>T:StockSharp.Algo.Testing.HistoryMessageAdapter</codeEntityReference>.
				</para>
				
				<code >
				<![CDATA[
connector.RegisterHistorySource(security, MarketDataTypes.CandleTimeFrame, TimeSpan.FromMinutes(1), d =>
          _finamHistorySource.GetCandles(security, TimeSpan.FromMinutes(1), d.Date, d.Date));
					  ]]>
				</code>
				</content>
			</step>
		  </steps>
	  </procedure>
    </introduction>
  </developerConceptualDocument>
</topic>